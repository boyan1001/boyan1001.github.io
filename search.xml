<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>吐司寫LeetCode :1905. Count Sub Islands</title>
    <url>/2024/08/28/hello-world/</url>
    <content><![CDATA[<p><strong>topic: <code>dfs</code> <code>bfs</code> <code>matrix</code></strong></p>
<h2 id="題目原文"><a href="#題目原文" class="headerlink" title="題目原文"></a>題目原文</h2><p>題目連結: <a class="link"   href="https://leetcode.com/problems/count-sub-islands/description/?envType=daily-question&envId=2024-08-28" >點我 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  </p>
<p>You are given two <code>m x n</code> binary matrices <code>grid1</code> and <code>grid2</code> containing only <code>0</code>‘s (representing water) and <code>1</code>‘s (representing land). An <strong>island</strong> is a group of <code>1</code>‘s connected <strong>4-directionally</strong> (horizontal or vertical). Any cells outside of the grid are considered water cells.  </p>
<p>An island in <code>grid2</code> is considered a <strong>sub-island</strong> if there is an island in <code>grid1</code> that contains <strong>all</strong> the cells that make up <strong>this</strong> island in <code>grid2</code>.  </p>
<p>Return the <em><strong>number</strong></em> of islands in <code>grid2</code> that are considered <em><strong>sub-islands.</strong></em>  </p>
<p><strong>Example 1:</strong>  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/ryIhBmhjC.png"
                     
                > </p>
<blockquote>
<p><strong>Input:</strong><br>grid1 &#x3D; [[1, 1, 1, 0, 0], [0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [1, 0, 0, 0, 0], [1, 1, 0, 1, 1]],<br>grid2 &#x3D; [[1, 1, 1, 0, 0], [0, 0, 1, 1, 1], [0, 1, 0, 0, 0], [1, 0, 1, 1, 0], [0, 1, 0, 1, 0]]<br><strong>Output:</strong><br>3<br><strong>Explanation:</strong><br>In the picture above, the grid on the left is grid1 and the grid on the right is grid2.<br>The 1s colored red in grid2 are those considered to be part of a sub-island. There are three sub-islands.</p>
</blockquote>
<p><strong>Example 2:</strong>  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/SkVr8Q2jR.png"
                     
                >  </p>
<blockquote>
<p><strong>Input:</strong><br>grid1 &#x3D; [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]],<br>grid2 &#x3D; [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]<br><strong>Output:</strong><br>2<br><strong>Explanation:</strong><br>In the picture above, the grid on the left is grid1 and the grid on the right is grid2.<br>The 1s colored red in grid2 are those considered to be part of a sub-island. There are two sub-islands.</p>
</blockquote>
<p><strong>Constraints:</strong>  </p>
<ul>
<li><code>m == grid1.length == grid2.length</code>  </li>
<li><code>n == grid1[i].length == grid2[i].length</code>  </li>
<li><code>1 &lt;= m, n &lt;= 500</code>  </li>
<li><code>grid1[i][j]</code> and <code>grid2[i][j]</code> are either <code>0</code> or <code>1</code>.</li>
</ul>
<h2 id="題解"><a href="#題解" class="headerlink" title="題解"></a>題解</h2><p>題目中給我們兩張一樣大的地圖分別為 <code>grid1</code> 與 <code>grid2</code>，兩張地圖由 <code>0</code> 和 <code>1</code> 組成，分別代表海洋與陸地，因此可從兩張地圖中看出島嶼的位置。  </p>
<p>若在 <code>grid2</code> 上的某座島嶼對應到 <code>grid1</code> 上時，<strong>整座島嶼</strong>都位於 <code>grid1</code> 中的<strong>一座島嶼</strong>上，則可稱位於<code>grid2</code>的該島嶼為<strong>子島嶼(Sub-island)</strong> 。本題想要我們找出在 <code>grid2</code> 上的所有子島嶼。  </p>
<h2 id="想一想"><a href="#想一想" class="headerlink" title="想一想"></a>想一想</h2><p>本題的邊長上限不大（最大地圖為<code>500*500</code>），基本上可以用基本的 <strong>深度優先搜尋（Depth First Search，DFS）</strong> 與 <strong>廣度優先搜尋（Breadth First Search，BFS）</strong> 來做處理。  </p>
<h2 id="方法1-DFS"><a href="#方法1-DFS" class="headerlink" title="方法1: DFS"></a>方法1: DFS</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3>
  <div class="note p-4 mb-4 rounded-small info">
    <p><del>dfs相信大家都很熟悉了把XD</del></p>

  </div>

<p><strong>深度優先搜尋（Depth First Search，DFS）</strong> 簡單來說就是透過一連串的遞迴（recursion）來對樹（tree）、圖（graph）等資料結構進行搜尋。這種演算法會盡可能的往樹或圖的深處走，因此稱為深度優先搜尋。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/BkrxGB2oC.jpg"
                      alt="IMG_0183"
                ><br>上圖範例的走訪順序為: <strong>A-&gt;B-&gt;C-&gt;D-&gt;E-&gt;F</strong></p>

  <div class="note p-4 mb-4 rounded-small info">
    <p>上方的走訪方式是<strong>二元樹走訪</strong>中的<strong>先序遍歷(Preorder Traversal)</strong> ，之後有時間會再寫一篇文來介紹二元樹走訪。</p>

  </div>
<p>以本題為例，我們會遍歷一次所有格子。在遍歷的途中，我們會對每個<strong>符合子島嶼條件</strong>的點做DFS，遍歷完後便可得到子島嶼總數。</p>
<p>每次<strong>DFS</strong>中，我們會針對每個點做以下三件事：  </p>
<ol>
<li>對該點做邊界檢測：若超出地圖邊界，回傳<code>0</code>  </li>
<li>偵測該點是否為海：若為海，回傳<code>0</code>  </li>
<li>偵測該點是否為<strong>違反子島嶼規則</strong>的陸地：若違反規則，則回傳<code>-1</code>  </li>
<li>對上、下、左、右四個相鄰點做DFS  </li>
<li>將該點的值改為<code>0</code>，避免重複走訪</li>
</ol>

  <div class="note p-4 mb-4 rounded-small tip">
    <p><font color="#77FF08"><i class="fa-solid fa-lightbulb"></i></font> 必須要整座島嶼的陸地皆符合<strong>子島嶼規則</strong>，該島嶼才能稱作是子島嶼</p>

  </div>


<h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Author: Toast1001</span></span><br><span class="line"><span class="comment">// Method: dfs</span></span><br><span class="line"><span class="comment">// TC: O(n*m)</span></span><br><span class="line"><span class="comment">// SC: O(n*m)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="keyword">auto</span> Init = []&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); </span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countSubIslands</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid1, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int32_t</span> ans = <span class="number">0</span>; <span class="comment">// sub-islands 總數</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍歷 grid2 上所有點</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int32_t</span> i = <span class="number">0</span>;i &lt; grid<span class="number">2.</span><span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int32_t</span> j = <span class="number">0</span>;j &lt; grid2[<span class="number">0</span>].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                <span class="comment">// 若該點符合 sub-island 規則，則進行 dfs</span></span><br><span class="line">                <span class="keyword">if</span>(grid1[i][j] == <span class="number">1</span> &amp;&amp; grid2[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="type">int32_t</span> temp = <span class="built_in">dfs</span>(i, j, grid1, grid2);</span><br><span class="line">                    <span class="keyword">if</span>(temp == <span class="number">1</span>)ans++; <span class="comment">// 若該點所連結的所有陸地可組合成一座 sub-island，則總數加一</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans; <span class="comment">// 回傳 sub-island 總數</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 方位陣列（dfs 用）</span></span><br><span class="line">    <span class="type">int32_t</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// dfs</span></span><br><span class="line">    <span class="function"><span class="type">int32_t</span> <span class="title">dfs</span><span class="params">(<span class="type">int32_t</span> i, <span class="type">int32_t</span> j, vector&lt;vector&lt;<span class="type">int32_t</span>&gt;&gt;&amp; grid1, vector&lt;vector&lt;<span class="type">int32_t</span>&gt;&gt;&amp; grid2)</span></span>&#123;</span><br><span class="line">        <span class="type">int32_t</span> ans = <span class="number">1</span>; <span class="comment">// 回傳值預設1</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= grid<span class="number">2.</span><span class="built_in">size</span>() || j &lt; <span class="number">0</span> || j &gt;= grid2[<span class="number">0</span>].<span class="built_in">size</span>())<span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 邊界檢測</span></span><br><span class="line">        <span class="keyword">if</span>(grid2[i][j] == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 檢測是否為海洋</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 檢測是否為違反 sub-island 規則的陸地</span></span><br><span class="line">        <span class="keyword">if</span>(grid1[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">            ans = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        grid2[i][j] = <span class="number">0</span>; <span class="comment">// 更新該點為海洋</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 對周圍四點做 dfs</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int32_t</span> k = <span class="number">0</span>;k &lt; <span class="number">4</span>;k++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 若周圍有陸地違反 sub-island 規則</span></span><br><span class="line">            <span class="comment">// 則與該點相連的陸塊皆不符合違反 sub-island 規則</span></span><br><span class="line">            <span class="comment">// 必須用 -1 紀錄</span></span><br><span class="line">            ans = <span class="built_in">min</span>(ans, <span class="built_in">dfs</span>(i + dir[k][<span class="number">0</span>], j + dir[k][<span class="number">1</span>], grid1, grid2));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(ans == <span class="number">-1</span>)<span class="keyword">return</span> ans; <span class="comment">// 若該島嶼違反 sub-island 規則，回傳 -1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h3 id="時間複雜度（Time-Complexity）：O-n-m"><a href="#時間複雜度（Time-Complexity）：O-n-m" class="headerlink" title="時間複雜度（Time Complexity）：O(n*m)"></a>時間複雜度（Time Complexity）：O(n*m)</h3><h3 id="空間複雜度（Time-Complexity）：O-n-m"><a href="#空間複雜度（Time-Complexity）：O-n-m" class="headerlink" title="空間複雜度（Time Complexity）：O(n*m)"></a>空間複雜度（Time Complexity）：O(n*m)</h3><h3 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h3><p>由於在做 DFS 的時候都有把走訪過的點紀錄，使所有點最多只會走訪一次，本質上就是在遍歷二維陣列，因此效率較高。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/rJTHqP3oR.png"
                      alt="image"
                ></p>
<h2 id="方法2-BFS"><a href="#方法2-BFS" class="headerlink" title="方法2: BFS"></a>方法2: BFS</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3>
  <div class="note p-4 mb-4 rounded-small info">
    <p><del>bfs相信大家也很熟悉了把XD</del></p>

  </div>

<p><strong>廣度優先搜尋（Breadth First Search，BFS）</strong> 與 DFS 一樣，可用於樹與圖的遍歷。不一樣的是，BFS 會將同一深度的點都走訪完成後，再往下一層前進。這種演算法傾向系統地展開並檢查圖中的所有節點，故稱為廣度優先搜尋。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/rygiv82jR.jpg"
                      alt="IMG_0184"
                ><br>上圖範例的走訪順序為: <strong>A-&gt;B-&gt;E-&gt;C-&gt;D-&gt;F</strong></p>
<p>遍歷時的邏輯大致與 DFS 一樣，在遍歷的途中，我們會對每個<strong>符合子島嶼條件</strong>的點做DFS，遍歷完後便可得到子島嶼總數。</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Author: Toast1001</span></span><br><span class="line"><span class="comment">// Method: dfs</span></span><br><span class="line"><span class="comment">// TC: O(n*m)</span></span><br><span class="line"><span class="comment">// SC: O(n*m)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="keyword">auto</span> Init = []&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); </span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countSubIslands</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid1, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化數字</span></span><br><span class="line">        <span class="type">int32_t</span> ans = <span class="number">0</span>; <span class="comment">// 子島嶼總數</span></span><br><span class="line">        <span class="type">int32_t</span> m = grid<span class="number">2.</span><span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int32_t</span> n = grid2[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">bool</span> makeup; <span class="comment">// 判斷陸地是否為子島嶼</span></span><br><span class="line">        <span class="type">int32_t</span> x, y, nx, ny;</span><br><span class="line">        queue&lt;<span class="type">int32_t</span>&gt; qx, qy; <span class="comment">// 儲存點的queue</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍歷</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int32_t</span> i = <span class="number">0</span>;i &lt; m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int32_t</span> j = <span class="number">0</span>;j &lt; n;j++)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 若該點在grid2為陸地，則走訪</span></span><br><span class="line">                <span class="keyword">if</span>(grid2[i][j])&#123;</span><br><span class="line">                    grid2[i][j] = <span class="number">0</span>; <span class="comment">// 更新該點為海洋</span></span><br><span class="line">                    makeup = (grid1[i][j] == <span class="number">1</span>); <span class="comment">// 判斷陸地是否為子島嶼</span></span><br><span class="line">                    qx.<span class="built_in">push</span>(i);</span><br><span class="line">                    qy.<span class="built_in">push</span>(j);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 利用queue做bfs</span></span><br><span class="line">                    <span class="keyword">while</span>(!qx.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                        x = qx.<span class="built_in">front</span>();</span><br><span class="line">                        y = qy.<span class="built_in">front</span>();</span><br><span class="line">                        qx.<span class="built_in">pop</span>();</span><br><span class="line">                        qy.<span class="built_in">pop</span>();</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// 尋找下一個存入queue的點</span></span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int32_t</span> k = <span class="number">0</span>;k &lt; <span class="number">4</span>;k++)&#123;</span><br><span class="line">                            nx = x + dx[k];</span><br><span class="line">                            ny = y + dy[k];</span><br><span class="line">                            </span><br><span class="line">                            <span class="comment">// 邊界檢測與海陸檢測</span></span><br><span class="line">                            <span class="keyword">if</span>(nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; n &amp;&amp; grid2[nx][ny])&#123;</span><br><span class="line">                                qx.<span class="built_in">push</span>(nx);</span><br><span class="line">                                qy.<span class="built_in">push</span>(ny);</span><br><span class="line">                                grid2[nx][ny] = <span class="number">0</span>; <span class="comment">// 更新為海洋</span></span><br><span class="line">                                makeup &amp;= (grid1[nx][ny] == <span class="number">1</span>); <span class="comment">// 判斷陸地是否為子島嶼</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 若該島嶼為子島嶼，則總數+1</span></span><br><span class="line">                    <span class="keyword">if</span>(makeup)&#123;</span><br><span class="line">                        ans++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int32_t</span> dx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="type">int32_t</span> dy[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<h3 id="時間複雜度（Time-Complexity）：O-n-m-1"><a href="#時間複雜度（Time-Complexity）：O-n-m-1" class="headerlink" title="時間複雜度（Time Complexity）：O(n*m)"></a>時間複雜度（Time Complexity）：O(n*m)</h3><h3 id="空間複雜度（Time-Complexity）：O-n-m-1"><a href="#空間複雜度（Time-Complexity）：O-n-m-1" class="headerlink" title="空間複雜度（Time Complexity）：O(n*m)"></a>空間複雜度（Time Complexity）：O(n*m)</h3><h3 id="結果-1"><a href="#結果-1" class="headerlink" title="結果"></a>結果</h3><p>本題使用 DFS 與 BFS 效率差不多，跑出來的成果都不錯。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/r1rNhv2iR.png"
                      alt="image"
                ></p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>這種 DFS 與 BFS 問題常常在面試白板題與競賽中出現，如果學會的話，會對未來很有幫助哦～  </p>
<p>那就老樣子啦，吐司寫 LeetCode，我們下次見，bye~ bye~</p>
<h2 id="類題"><a href="#類題" class="headerlink" title="類題"></a>類題</h2><p><strong>LeetCode:</strong><br><a class="link"   href="https://leetcode.com/problems/number-of-islands/description/" >200. Number of Islands <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://leetcode.com/problems/find-all-groups-of-farmland/" >1992. Find All Groups of Farmland <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>解題日記</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>LeetCode daily</tag>
        <tag>matrix</tag>
        <tag>dfs</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>吐司的 2024 回顧</title>
    <url>/2025/01/01/2024-Throwback/</url>
    <content><![CDATA[<h1 id="2024-回顧"><a href="#2024-回顧" class="headerlink" title="2024 回顧"></a>2024 回顧</h1><p>最近看到有好多朋友在寫年度回顧，剛好這一年也發生蠻多事情的(X，就來寫一下了XD  </p>
<h2 id="一月：中部之旅"><a href="#一月：中部之旅" class="headerlink" title="一月：中部之旅"></a>一月：中部之旅</h2><p>2024年初，我和我高中朋友一起去台中玩。這是高中畢業後第一次揪你們出來玩（<del>有夠難揪</del>），感覺大家在外貌上都變了很多，尤其是髮型，還是不知道為什麼你們那時候都剪禿頭。不過相處起來還是開心，大家都還洋溢著青春的氣息呢！</p>
<p>這趟中部之旅逛了很多地方，從彰化逛到台中美術館，晚上再騎腳踏車到一中街。實在很難想像怎麼在一天逛完那麼多地方的，雖然現在的我依然可以做到，但還是很震驚！或許有錢一點我們就可以住飯店了吧XD</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/rk8G70-8ke.jpg"
                      alt="IMG_3081"
                ><br>▲圖1：這裡是台灣美術館，當初在裡面逛了好久，但還是理解不了藝術的深奧<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/HyKmI_VU1x.jpg"
                      alt="IMG_3090"
                ><br>▲圖2：晚上的台中車站，超美，跟桃園車站完全不一樣  </p>
<h2 id="二月：我的新夥伴-—-Ipad"><a href="#二月：我的新夥伴-—-Ipad" class="headerlink" title="二月：我的新夥伴 — Ipad"></a>二月：我的新夥伴 — Ipad</h2><p>2024年，有一位新夥伴加入了我的學習之旅 — <strong>Ipad</strong>。在 Apple 暑假主導的 <strong>Back to School</strong> 優惠影響下，在二月買 Ipad 似乎是一件很盤的事；然而，那時我使用網購的方式，只花一萬多塊買下了這個 Ipad，可以說是十分划算。當初買 Ipad 的時候，我還在猶豫要不要撐到七月再買，我然而我秉持著「先買先享受」的精神，直接先買了，後來發現我的決定是正確的。  </p>
<p>買了 Ipad，就免不了買一大堆配件。在開學後，我跟<strong>歐姆巴</strong>去了一趟光華商場，我買了類紙膜回來貼（我再也受不了滑得要命的 Ipad 了）。光華商場跟隔壁的三創讓我印象蠻深刻的，然而讓我印象最深刻的是<strong>咖食堂</strong>咖哩飯，不得不說真的好好吃又好便宜。  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/rkfxDRWLyg.jpg"
                      alt="IMG_3141"
                ><br>▲圖3：Toyz 的拾玖茶屋，就一般的珍奶，沒啥特別  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/ryisLONUyx.jpg"
                      alt="IMG_3157"
                ><br>▲圖4：映著夕陽的三創  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/SktgPdNUyg.jpg"
                      alt="IMG_3163"
                ><br>▲圖5：咖食堂咖哩飯，台北最好吃的咖哩飯  </p>
<h2 id="三月：駕照-get"><a href="#三月：駕照-get" class="headerlink" title="三月：駕照 get!"></a>三月：駕照 get!</h2><p>三月我拿到了我的機車駕照了！當時我還沒有機車駕照，去哪裡都好不方便。於是，我打算我要考一個機車駕照。因為重考只能報早上場（<del>對我是重考生</del>），還記得那時候我六點起床，從公館直接殺到位於士林的監理站考試，那是我大學生活起的最早的一天。經過現場的多次訓練後，我終於！終於！終於拿到駕照了！  </p>
<p>那時我真的很高興，為了這張駕照，我去永和的河濱公園練了好幾次（<del>真的很謝謝冠宏哥陪我練習</del>）  </p>
<h2 id="四月：豐富的大學生活"><a href="#四月：豐富的大學生活" class="headerlink" title="四月：豐富的大學生活"></a>四月：豐富的大學生活</h2><p>四月可說是非常多聚會的一個月，先是台中朋友聚、阜杭豆漿聚，後來還有金色三麥聚，甚至在這個月我獲得了夜店初體驗。可以說十分豐富。  </p>
<p>阜杭豆漿可以說是我喝過最好喝的豆漿了，完全沒有愧對他米其林的名聲。當初我們宿舍三人組為了喝到這碗豆漿，直接通宵到五點半排隊，可以說是非常瘋狂。但更瘋狂的是，五點半竟然也要排快 20 分鐘才能喝到。看來阜杭豆漿真的是遠近馳名阿。  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/HJMdvdEI1e.jpg"
                      alt="IMG_3779"
                ><br>▲圖6：阜杭豆漿  </p>
<p>金色三麥可以說是我吃的最爽的餐廳了，那天我揪了我們系上的九個人（真的非常難得可以揪到那麼多人）。金色三麥的蜂蜜啤酒真的好好喝，連我這種對啤酒反感的人，都可以把整杯乾完。下次有機會一定會再去吃。  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/r1A3v_VIkx.jpg"
                      alt="IMG_3808"
                ><br>▲圖7：金色三麥  </p>
<h2 id="六月：雙重專題轟炸"><a href="#六月：雙重專題轟炸" class="headerlink" title="六月：雙重專題轟炸"></a>六月：雙重專題轟炸</h2>
  <div class="note p-4 mb-4 rounded-small info">
    <p>五月東西太少了，就先跳過了</p>

  </div>

<p>六月時，我在資工營與兩份專題間的轟炸之下，艱難得撐過來了。首先登場的，是遊戲程式設計專題。這份專題是我通識課的作業，雖然說是通識，但也是蠻累的啊……想當初我們小組可以說是進度神速，在一周以內就肝完 90% 的進度，真的是很會壓死線的一群人啊。  </p>
<p>最後也拿下了第二名的成績～  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/BkH7h4E81e.png"
                      alt="image"
                ><br>▲圖8：遊戲程式專題—神魔 crush  </p>
<p>另外一個專題就是我們的程設（二）專題。這個專題要我們製作一個以 <strong>C 語言</strong>為基礎的<strong>文字遊戲引擎</strong>。這份專題讓我體悟到 SDL2 是多麼邪門的東西，很常因為少了什麼條件就 segmentation fault ……甚至有好幾次 debug 花了 <strong>八個小時</strong> 之久。這份專題也是讓我第一次體驗到完全沒睡覺的一天，可以說是大一尾巴的震撼教育。  </p>

  <div class="note p-4 mb-4 rounded-small info">
    <p>不得不說，寫到這邊的時候真的有 PTSD  </p>

  </div>

<p>最後這份嘔心瀝血的專題救了我岌岌可危的程設（二），感謝 <strong>L 紀</strong>，感謝<strong>助教們</strong>。  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/SkcRTVE81e.jpg"
                      alt="IMG_4278"
                ><br>▲圖9：我們的程式設計專題  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/HJhkCEVIyg.jpg"
                      alt="IMG_4285"
                ><br>▲圖10：在<strong>歐姆巴</strong>家邊吃阿婆壽司邊寫專題的紀錄照  </p>
<h2 id="七月：資工營"><a href="#七月：資工營" class="headerlink" title="七月：資工營"></a>七月：資工營</h2><p>在暑假迎接我的，便是我們幾乎全系籌備半年的超大營隊—<strong>資工營</strong>了。稍早在六月有說到除了專題以外，最讓我煩惱的便是資工營了。在這長達半年的籌備期中，經歷了許多大大小小的事，雖然有些辛苦無法獲得收穫（<del>剪了 20 分鐘的影片卻沒人看</del>），雖然有些人在中途退出了營隊，但營隊還算圓滿結束，我也體會到參與營隊的感覺（算是彌補我之前沒有參加過營隊的遺憾吧）。  </p>
<p>這次營隊不但讓我學到許多事情，也認識到蠻多人。在 2025 年，我也報名了下一次的資工營，希望也可以從中學習許多事物，也能從中認識到更多人。  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/ByveWrN8Jg.jpg"
                      alt="IMG_5291"
                ><br>▲圖11：資工營結束~ btw 吐司這個名字就是源自於資工營哦~  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/SksJbSNIyg.png"
                      alt="image"
                ><br>▲圖12：飯店小插曲，<strong>米奇(我朋友)</strong> 大戰小強  </p>
<h2 id="八月：家教初體驗"><a href="#八月：家教初體驗" class="headerlink" title="八月：家教初體驗"></a>八月：家教初體驗</h2><p>如果要說今年我做過最不一樣的嘗試是什麼，那就是當家教了。八月初，我在板橋當兩個國小生的家教，他們是我第一批學生。在這段期間，我發現要教會一個人其實沒有很簡單，有很多小細節要注意。不過我在這段期間也收穫滿滿，家長人也蠻好的，每次去幾乎都會請我喝咖啡，真的很幸運第一次教書就遇到天使家長。  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/r168mH4U1l.png"
                      alt="image"
                ><br>▲圖13：家教照片  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/rJwd7BVUyg.png"
                      alt="image"
                ><br>▲圖14：這是跟常哥還有一群高中朋友去吃飯的照片，是非常難得的五人聚  </p>
<h2 id="九月：大二新生活"><a href="#九月：大二新生活" class="headerlink" title="九月：大二新生活"></a>九月：大二新生活</h2><p>上了大二之後，迎面而來的是忙碌的大學生活。學分大地遊戲、家聚、各種消夜聚等，構成了我豐富的大二生活。這段時間也是我大二上限動最豐富的時期。  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/HyGjBHNLkl.jpg"
                      alt="FullSizeRender"
                ><br>▲圖15：三個家的家聚超大合照  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/SyvaHH4Uye.jpg"
                      alt="IMG_4031"
                ><br>▲圖16：幫無菌蛋慶生  </p>
<h2 id="十月：企業參訪"><a href="#十月：企業參訪" class="headerlink" title="十月：企業參訪"></a>十月：企業參訪</h2><p>十月初我參加了 Appier 的企業參訪，不得不說，這真的是我參加過含金量最高的企業參訪。世界咖啡館方式的員工對話、誠意滿滿的贈品與好吃的食物，真的收穫滿滿。  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/HJl1P8VUkl.jpg"
                      alt="IMG_5772"
                ><br>▲圖17：Appier 參訪留下的食物，非常好吃  </p>
<h2 id="十一月：黑客松與-DevFest"><a href="#十一月：黑客松與-DevFest" class="headerlink" title="十一月：黑客松與 DevFest"></a>十一月：黑客松與 DevFest</h2><p>十一月我參加了我人生中第一場黑客松—<strong>師大白客松</strong>，在這次黑客松中，我做了一個可以透過影像辨識，將影像<strong>實時轉換</strong>成 <strong>Ascii-art</strong> 圖案的程式。這次體會讓我體會到原來一個晚上可以肝出那麼多程式，讓我真正開始對寫 side project 產生熱忱，也讓我開始積極參與資訊活動。此外，也<strong>歐姆巴</strong>跟 <strong>Jerry</strong> 陪我一起參加黑克松。  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/ByOEa8NUkx.jpg"
                      alt="IMG_5937"
                ><br>▲圖18：師大白客松  </p>
<p>十一月底我參加了 GDG Taipei 舉辦的 <strong>DevFest</strong>，這是我第一次參加那麼大的資訊界活動。在這個活動中，我接觸到了許多像是 NotebookLM 等好用的 AI 產品，也透過工作坊玩了一下 RAG 相關的實作（<del>雖然只是按幾個按鈕而已</del>）。經過這次活動後，我開始對人工智慧領域產生興趣，這也是我最近開始在學習機器學習的原因之一。希望我以後也能站上去講話XD  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/rkcc0U48Jl.jpg"
                      alt="IMG_6169"
                ><br>▲圖19：DevFest  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/SkYWJPVIkx.jpg"
                      alt="IMG_6194"
                ><br>▲圖20：中央大學 GDSC 所開的工作坊活動，希望有一天也能像電神們在上面講課  </p>
<h2 id="十二月：計網專題大轟炸"><a href="#十二月：計網專題大轟炸" class="headerlink" title="十二月：計網專題大轟炸"></a>十二月：計網專題大轟炸</h2><p>2024 年底也是專題爆炸的一個月，直到跨年前幾天，我還在為了我的<strong>計算機網路</strong>專題奮鬥著呢！這也就是為什麼 2024 回顧這篇文無法趕在 2025 前上架。在這份專題中，我們要做一個<strong>實時聊天室</strong>，必須要支援傳輸簡訊、加密、傳輸檔案等功能。這份作業花了我不少時間，最後甚至差點寫不完。這次計算機網路專題讓我嘗試了怎麼用 C++ 寫 <strong>Socket programming</strong>，算是我從未體驗過的事。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hackmd.io/_uploads/rkFTq_ELkg.png"
                      alt="image"
                ><br>▲圖21：我的計算機網路專題  </p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這篇文打好也離跨年有一段時間了，仔細打完才發現自己今年做了那麼多事情～希望在 2025 年，我們都能過得更好。  </p>
]]></content>
      <categories>
        <category>解題日記</category>
      </categories>
      <tags>
        <tag>年度回顧</tag>
      </tags>
  </entry>
</search>
